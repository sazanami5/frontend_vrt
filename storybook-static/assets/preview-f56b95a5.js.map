{"version":3,"file":"preview-f56b95a5.js","sources":["../../node_modules/storycap/lib-esm/shared/screenshot-options-helper.js","../../node_modules/storycap/lib-esm/client/trigger-screenshot.js","../../node_modules/storycap/lib-esm/client/with-screenshot.js","../../.storybook/preview.ts"],"sourcesContent":["const defaultScreenshotOptions = {\n    waitAssets: true,\n    waitImages: false,\n    waitFor: '',\n    fullPage: true,\n    skip: false,\n    focus: '',\n    hover: '',\n    click: '',\n    variants: {},\n    omitBackground: false,\n    captureBeyondViewport: true,\n    clip: null,\n    forwardConsoleLogs: false,\n    trace: false,\n};\n/**\n *\n * Convert to `viewport` and `variants` from `viewports` filed.\n *\n * @param options - Screenshot options which may have `viewports` field\n * @returns - Screenshot options with variants corresponding to the `viewports` field\n *\n **/\nexport function expandViewportsOption(options) {\n    if (!options.viewports)\n        return options;\n    const { viewports } = options;\n    const ret = { ...options };\n    delete ret.viewports;\n    const viewportNames = Array.isArray(viewports) ? viewports : Object.keys(viewports);\n    if (!viewportNames.length)\n        return options;\n    const getVp = (vpName) => (Array.isArray(viewports) ? vpName : viewports[vpName]);\n    const variants = { ...options.variants } || {};\n    viewportNames.slice(1).forEach(vpName => (variants[vpName] = { viewport: getVp(vpName) }));\n    ret.viewport = getVp(viewportNames[0]);\n    ret.variants = variants;\n    if (viewportNames.length > 1) {\n        ret.defaultVariantSuffix = viewportNames[0];\n    }\n    return ret;\n}\n/**\n *\n * Returns fulfilled `ScreenshotOptions` object from some properties.\n *\n * @param props - Some properties of `ScreenshotOptions` fragment\n * @returns Fulfilled screenshot options\n *\n **/\nexport function createBaseScreenshotOptions({ delay, disableWaitAssets, viewports, }) {\n    if (viewports.length > 1) {\n        return {\n            ...defaultScreenshotOptions,\n            delay,\n            waitAssets: !disableWaitAssets,\n            viewport: viewports[0],\n            variants: viewports.slice(1).reduce((acc, vp) => ({ ...acc, [vp]: { viewport: vp } }), {}),\n            defaultVariantSuffix: viewports[0],\n        };\n    }\n    else {\n        return {\n            ...defaultScreenshotOptions,\n            delay,\n            waitAssets: !disableWaitAssets,\n            viewport: viewports[0],\n            defaultVariantSuffix: '',\n        };\n    }\n}\n/**\n *\n * Combines 2 screenshot options.\n *\n * @param base - The base screenshot options\n * @param fragment - The fragment screenshot options to override the base options\n * @returns Merged screenshot options\n *\n **/\nexport function mergeScreenshotOptions(base, fragment) {\n    const ret = Object.assign({}, base, fragment);\n    if (!base.viewport || typeof base.viewport === 'string') {\n        if (fragment.viewport) {\n            ret.viewport = fragment.viewport;\n        }\n    }\n    else {\n        if (!fragment.viewport) {\n        }\n        else if (typeof fragment.viewport === 'object') {\n            ret.viewport = {\n                ...base.viewport,\n                ...fragment.viewport,\n            };\n        }\n        else {\n            ret.viewport = fragment.viewport;\n        }\n    }\n    if (base.variants) {\n        ret.variants = mergeScreenshotOptions(base.variants, fragment.variants || {});\n    }\n    return ret;\n}\n/**\n *\n * Returns keys of all variants in given screenshot options expanding `extends` field in each variant.\n *\n * @param options - Screenshot options which may have `variants` field\n * @returns If succeeded extracted variant keys. If not succeeded the reason of the failure\n *\n **/\nexport function extractVariantKeys({ variants, defaultVariantSuffix, }) {\n    if (!variants)\n        return [null, []];\n    let invalidReason = undefined;\n    const ret = Object.keys(variants).reduce((acc, key) => {\n        const keysList = [];\n        const getParentKeys = (currentKey, childrenKeys = []) => {\n            // Set `defaultVariantSuffix` value as the head variant key if it's referred.\n            if (defaultVariantSuffix && defaultVariantSuffix === currentKey) {\n                keysList.push([currentKey, ...childrenKeys]);\n                return true;\n            }\n            // Check the key exists.\n            if (!variants[currentKey]) {\n                invalidReason = {\n                    type: 'notFound',\n                    from: childrenKeys[0],\n                    to: currentKey,\n                };\n                return false;\n            }\n            // Check circular reference.\n            if (childrenKeys.find(k => k === currentKey)) {\n                invalidReason = {\n                    type: 'circular',\n                    refs: [currentKey, ...childrenKeys],\n                };\n                return false;\n            }\n            const parent = variants[currentKey].extends;\n            const parentKeys = Array.isArray(parent) ? parent : typeof parent === 'string' ? [parent] : [];\n            // Ends recursive process because the root is here.\n            if (!parentKeys.length) {\n                keysList.push([currentKey, ...childrenKeys]);\n                return true;\n            }\n            // Get variant keys for each parent if this variant has parents to extend.\n            return parentKeys.every(pk => getParentKeys(pk, [currentKey, ...childrenKeys]));\n        };\n        getParentKeys(key);\n        return [...acc, ...keysList.map(keys => ({ isDefault: false, keys }))];\n    }, []);\n    if (!invalidReason)\n        return [null, ret];\n    return [invalidReason, []];\n}\n/**\n *\n * Pick up screenshot options corresponding to given variant from the root screenshot options.\n *\n * @param options - The root(default) screenshot options\n * @param vk - Key of the target variant\n * @returns Screenshot options for the target variant\n *\n **/\nexport function pickupWithVariantKey(options, vk) {\n    if (vk.isDefault)\n        return options;\n    const base = Object.assign({}, options);\n    const variants = base.variants || {};\n    delete base.variants;\n    const offset = vk.keys[0] && vk.keys[0] === options.defaultVariantSuffix ? 1 : 0;\n    return vk.keys\n        .slice(offset)\n        .reduce((acc, key) => mergeScreenshotOptions(acc, variants[key]), base);\n}\n","import { mergeScreenshotOptions, pickupWithVariantKey, expandViewportsOption, } from '../shared/screenshot-options-helper';\nfunction withExpoesdWindow(cb) {\n    if (typeof 'window' === 'undefined')\n        return;\n    const win = window;\n    if (!win.emitCapture)\n        return;\n    return cb(win);\n}\nfunction url2StoryKey(url) {\n    const { searchParams } = new URL(url);\n    const id = searchParams.get('id');\n    const kind = searchParams.get('selectedKind');\n    const story = searchParams.get('selectedStory');\n    if (id) {\n        // Query string has `id` if Storybook v5\n        return id;\n    }\n    else if (kind && story) {\n        // Query string has `selectedKind` and `selectedStory` if Storybook v4\n        return `${kind}/${story}`;\n    }\n    throw new Error();\n}\nfunction waitForDelayTime(time = 0) {\n    return new Promise(res => setTimeout(res, time));\n}\nfunction waitUserFunction(waitFor) {\n    if (!waitFor)\n        return Promise.resolve();\n    if (typeof waitFor === 'string') {\n        const userDefinedFn = window[waitFor];\n        if (typeof userDefinedFn !== 'function')\n            return Promise.resolve();\n        return Promise.resolve().then(() => userDefinedFn());\n    }\n    else if (typeof waitFor === 'function') {\n        return waitFor();\n    }\n    else {\n        return Promise.resolve();\n    }\n}\nfunction waitForNextIdle(win) {\n    return new Promise(res => win.requestIdleCallback(res, { timeout: 3000 }));\n}\nfunction pushOptions(win, storyKey, opt) {\n    if (!storyKey)\n        return;\n    if (!win.optionStore)\n        win.optionStore = {};\n    if (!win.optionStore[storyKey])\n        win.optionStore[storyKey] = [];\n    win.optionStore[storyKey].push(opt);\n}\nfunction consumeOptions(win, storyKey) {\n    if (!win.optionStore)\n        return null;\n    if (!win.optionStore[storyKey])\n        return null;\n    const result = win.optionStore[storyKey];\n    delete win.optionStore[storyKey];\n    return result;\n}\nfunction stock(opt = {}, context) {\n    let storyKey = undefined;\n    if (context && context.id) {\n        storyKey = context.id;\n    }\n    else if (context && !!context.story && !!context.kind) {\n        storyKey = context.kind + '/' + context.story;\n    }\n    else {\n        storyKey = url2StoryKey(location.href);\n    }\n    withExpoesdWindow(win => pushOptions(win, storyKey, opt));\n}\nfunction capture() {\n    withExpoesdWindow(async (win) => {\n        // First, wait until DOM calculation process is stable because UI frameworks can mutate DOM asynchronously.\n        // So we check the number of DOM elements and how many times the browser calculate CSS style.\n        // We assume that it's ready for screenshot if these values are stable.\n        await win.waitBrowserMetricsStable();\n        // Fetch some properties from the Node.js main process\n        const [baseScreenshotOptions, variantKey] = await Promise.all([\n            win.getBaseScreenshotOptions(),\n            win.getCurrentVariantKey(), // Variant key for this capturing process\n        ]);\n        // Get stored screenshot options of this story.\n        const storyKey = url2StoryKey(location.href);\n        const storedOptsList = consumeOptions(win, storyKey);\n        if (!storedOptsList)\n            return; // This code is for type assertion. Stocked options must not be null.\n        // Combine all stored options.\n        const mergedOptions = storedOptsList.reduce((acc, opt) => mergeScreenshotOptions(acc, expandViewportsOption(opt)), baseScreenshotOptions);\n        // We should consider the following 2 cases:\n        //\n        // 1. `variantKey.isDefault: true`\n        // It's the first time emitting for this story and Node.js main process don't know what options this story has.\n        // So we should emit the entire options to the main process and the main process should queue requests corresponding to variants included in the options.\n        //\n        // 2. `variantKey.isDefault: false`\n        // It's the second(or more) time emitting for this story.\n        // In this case, we should emit the only options corresponding to this variant.\n        //\n        // And the `pickupWithVariantKey` function supports both cases.\n        //\n        const scOpt = pickupWithVariantKey(mergedOptions, variantKey);\n        // Emit canceling to the main process if `skip: true` and exit this function.\n        if (scOpt.skip)\n            return win.emitCapture(scOpt, storyKey);\n        // Wait for the following:\n        // - Delay time set by options(API or CLI)\n        // - User promise function\n        // - Other browser's main thread procedure(using rIC)\n        await waitForDelayTime(scOpt.delay);\n        await waitUserFunction(scOpt.waitFor);\n        await waitForNextIdle(win);\n        // Finally, send options to the Node.js main process.\n        await win.emitCapture(scOpt, storyKey);\n    });\n}\n/**\n *\n * Emit given screenshot options to Node.js process.\n *\n * @param screenshotOptions - Options for screenshot\n *\n */\nexport function triggerScreenshot(screenshotOptions, context) {\n    // This function can be called twice or more.\n    // So we should stock all options for each calling and emit merged them to Node.js\n    stock(screenshotOptions, context);\n    Promise.resolve().then(capture);\n}\n","import { makeDecorator } from '@storybook/addons';\nimport { triggerScreenshot } from './trigger-screenshot';\n// NOTE:\n// `makeDecorator` is only available with @storybook/addons@^5.0.0 .\nconst withScreenshotDecorator = makeDecorator &&\n    makeDecorator({\n        name: 'withScreenshot',\n        parameterName: 'screenshot',\n        skipIfNoParametersOrOptions: false,\n        allowDeprecatedUsage: true,\n        wrapper: (getStory, context, { parameters, options }) => {\n            if (typeof process !== 'undefined' && (process === null || process === void 0 ? void 0 : process.env.JEST_WORKER_ID) !== undefined) {\n                return getStory(context);\n            }\n            const screenshotOptions = parameters || options;\n            triggerScreenshot(screenshotOptions, context);\n            return getStory(context);\n        },\n    });\nfunction withScreenshotLegacy(screenshotOptions = {}) {\n    return (storyFn, ctx) => {\n        const wrapperWithContext = (context) => {\n            triggerScreenshot(screenshotOptions, context);\n            return storyFn(context);\n        };\n        if (ctx) {\n            return wrapperWithContext(ctx);\n        }\n        return (context) => wrapperWithContext(context);\n    };\n}\nconst withScreenshot = (withScreenshotDecorator || withScreenshotLegacy);\nexport { withScreenshot };\n","import type { Preview } from \"@storybook/react\";\nimport {withScreenshot} from \"storycap\"\n\nconst preview: Preview = {\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n};\n\nexport const decorators = [withScreenshot];\n\nexport default preview;\n"],"names":["expandViewportsOption","options","viewports","ret","viewportNames","getVp","vpName","variants","mergeScreenshotOptions","base","fragment","pickupWithVariantKey","vk","offset","acc","key","withExpoesdWindow","cb","win","url2StoryKey","url","searchParams","id","kind","story","waitForDelayTime","time","res","waitUserFunction","waitFor","userDefinedFn","waitForNextIdle","pushOptions","storyKey","opt","consumeOptions","result","stock","context","capture","baseScreenshotOptions","variantKey","storedOptsList","mergedOptions","scOpt","triggerScreenshot","screenshotOptions","makeDecorator","withScreenshotDecorator","getStory","parameters","withScreenshotLegacy","storyFn","ctx","wrapperWithContext","withScreenshot","preview","decorators"],"mappings":"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","x_google_ignoreList":[0,1,2]}